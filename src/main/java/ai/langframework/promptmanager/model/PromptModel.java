/*
 * CORE-PromptManager-API
 * Prompt Manager REST API Endpoints
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ai.langframework.promptmanager.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import ai.langframework.promptmanager.client.JSON;

/**
 * PromptModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-17T17:22:15.826187400+05:00[Asia/Karachi]", comments = "Generator version: 7.10.0")
public class PromptModel {
  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  @javax.annotation.Nullable
  private Integer userId;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  @javax.annotation.Nullable
  private Integer category;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  @javax.annotation.Nullable
  private String title;

  public static final String SERIALIZED_NAME_TEMPLATE = "template";
  @SerializedName(SERIALIZED_NAME_TEMPLATE)
  @javax.annotation.Nullable
  private String template;

  public static final String SERIALIZED_NAME_SYSTEM_TEMPLATE = "systemTemplate";
  @SerializedName(SERIALIZED_NAME_SYSTEM_TEMPLATE)
  @javax.annotation.Nullable
  private String systemTemplate;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  @javax.annotation.Nullable
  private String provider;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  @javax.annotation.Nullable
  private String model;

  public static final String SERIALIZED_NAME_TEMPERATURE = "temperature";
  @SerializedName(SERIALIZED_NAME_TEMPERATURE)
  @javax.annotation.Nullable
  private BigDecimal temperature;

  public static final String SERIALIZED_NAME_TOKEN_SIZE = "tokenSize";
  @SerializedName(SERIALIZED_NAME_TOKEN_SIZE)
  @javax.annotation.Nullable
  private Integer tokenSize;

  public static final String SERIALIZED_NAME_EXAMPLE_INPUT = "exampleInput";
  @SerializedName(SERIALIZED_NAME_EXAMPLE_INPUT)
  @javax.annotation.Nullable
  private String exampleInput;

  public static final String SERIALIZED_NAME_EXAMPLE_OUTPUT = "exampleOutput";
  @SerializedName(SERIALIZED_NAME_EXAMPLE_OUTPUT)
  @javax.annotation.Nullable
  private String exampleOutput;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_PROMPT_TYPE = "promptType";
  @SerializedName(SERIALIZED_NAME_PROMPT_TYPE)
  @javax.annotation.Nullable
  private String promptType;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  @javax.annotation.Nullable
  private String language;

  public PromptModel() {
  }

  public PromptModel userId(@javax.annotation.Nullable Integer userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nullable
  public Integer getUserId() {
    return userId;
  }

  public void setUserId(@javax.annotation.Nullable Integer userId) {
    this.userId = userId;
  }


  public PromptModel category(@javax.annotation.Nullable Integer category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public Integer getCategory() {
    return category;
  }

  public void setCategory(@javax.annotation.Nullable Integer category) {
    this.category = category;
  }


  public PromptModel title(@javax.annotation.Nullable String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(@javax.annotation.Nullable String title) {
    this.title = title;
  }


  public PromptModel template(@javax.annotation.Nullable String template) {
    this.template = template;
    return this;
  }

  /**
   * Get template
   * @return template
   */
  @javax.annotation.Nullable
  public String getTemplate() {
    return template;
  }

  public void setTemplate(@javax.annotation.Nullable String template) {
    this.template = template;
  }


  public PromptModel systemTemplate(@javax.annotation.Nullable String systemTemplate) {
    this.systemTemplate = systemTemplate;
    return this;
  }

  /**
   * Get systemTemplate
   * @return systemTemplate
   */
  @javax.annotation.Nullable
  public String getSystemTemplate() {
    return systemTemplate;
  }

  public void setSystemTemplate(@javax.annotation.Nullable String systemTemplate) {
    this.systemTemplate = systemTemplate;
  }


  public PromptModel tags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
    return this;
  }

  public PromptModel addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
  }


  public PromptModel provider(@javax.annotation.Nullable String provider) {
    this.provider = provider;
    return this;
  }

  /**
   * Get provider
   * @return provider
   */
  @javax.annotation.Nullable
  public String getProvider() {
    return provider;
  }

  public void setProvider(@javax.annotation.Nullable String provider) {
    this.provider = provider;
  }


  public PromptModel model(@javax.annotation.Nullable String model) {
    this.model = model;
    return this;
  }

  /**
   * Get model
   * @return model
   */
  @javax.annotation.Nullable
  public String getModel() {
    return model;
  }

  public void setModel(@javax.annotation.Nullable String model) {
    this.model = model;
  }


  public PromptModel temperature(@javax.annotation.Nullable BigDecimal temperature) {
    this.temperature = temperature;
    return this;
  }

  /**
   * Get temperature
   * @return temperature
   */
  @javax.annotation.Nullable
  public BigDecimal getTemperature() {
    return temperature;
  }

  public void setTemperature(@javax.annotation.Nullable BigDecimal temperature) {
    this.temperature = temperature;
  }


  public PromptModel tokenSize(@javax.annotation.Nullable Integer tokenSize) {
    this.tokenSize = tokenSize;
    return this;
  }

  /**
   * Get tokenSize
   * @return tokenSize
   */
  @javax.annotation.Nullable
  public Integer getTokenSize() {
    return tokenSize;
  }

  public void setTokenSize(@javax.annotation.Nullable Integer tokenSize) {
    this.tokenSize = tokenSize;
  }


  public PromptModel exampleInput(@javax.annotation.Nullable String exampleInput) {
    this.exampleInput = exampleInput;
    return this;
  }

  /**
   * Get exampleInput
   * @return exampleInput
   */
  @javax.annotation.Nullable
  public String getExampleInput() {
    return exampleInput;
  }

  public void setExampleInput(@javax.annotation.Nullable String exampleInput) {
    this.exampleInput = exampleInput;
  }


  public PromptModel exampleOutput(@javax.annotation.Nullable String exampleOutput) {
    this.exampleOutput = exampleOutput;
    return this;
  }

  /**
   * Get exampleOutput
   * @return exampleOutput
   */
  @javax.annotation.Nullable
  public String getExampleOutput() {
    return exampleOutput;
  }

  public void setExampleOutput(@javax.annotation.Nullable String exampleOutput) {
    this.exampleOutput = exampleOutput;
  }


  public PromptModel description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public PromptModel promptType(@javax.annotation.Nullable String promptType) {
    this.promptType = promptType;
    return this;
  }

  /**
   * Get promptType
   * @return promptType
   */
  @javax.annotation.Nullable
  public String getPromptType() {
    return promptType;
  }

  public void setPromptType(@javax.annotation.Nullable String promptType) {
    this.promptType = promptType;
  }


  public PromptModel language(@javax.annotation.Nullable String language) {
    this.language = language;
    return this;
  }

  /**
   * Get language
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(@javax.annotation.Nullable String language) {
    this.language = language;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PromptModel promptModel = (PromptModel) o;
    return Objects.equals(this.userId, promptModel.userId) &&
        Objects.equals(this.category, promptModel.category) &&
        Objects.equals(this.title, promptModel.title) &&
        Objects.equals(this.template, promptModel.template) &&
        Objects.equals(this.systemTemplate, promptModel.systemTemplate) &&
        Objects.equals(this.tags, promptModel.tags) &&
        Objects.equals(this.provider, promptModel.provider) &&
        Objects.equals(this.model, promptModel.model) &&
        Objects.equals(this.temperature, promptModel.temperature) &&
        Objects.equals(this.tokenSize, promptModel.tokenSize) &&
        Objects.equals(this.exampleInput, promptModel.exampleInput) &&
        Objects.equals(this.exampleOutput, promptModel.exampleOutput) &&
        Objects.equals(this.description, promptModel.description) &&
        Objects.equals(this.promptType, promptModel.promptType) &&
        Objects.equals(this.language, promptModel.language);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userId, category, title, template, systemTemplate, tags, provider, model, temperature, tokenSize, exampleInput, exampleOutput, description, promptType, language);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PromptModel {\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    systemTemplate: ").append(toIndentedString(systemTemplate)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    temperature: ").append(toIndentedString(temperature)).append("\n");
    sb.append("    tokenSize: ").append(toIndentedString(tokenSize)).append("\n");
    sb.append("    exampleInput: ").append(toIndentedString(exampleInput)).append("\n");
    sb.append("    exampleOutput: ").append(toIndentedString(exampleOutput)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    promptType: ").append(toIndentedString(promptType)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("userId");
    openapiFields.add("category");
    openapiFields.add("title");
    openapiFields.add("template");
    openapiFields.add("systemTemplate");
    openapiFields.add("tags");
    openapiFields.add("provider");
    openapiFields.add("model");
    openapiFields.add("temperature");
    openapiFields.add("tokenSize");
    openapiFields.add("exampleInput");
    openapiFields.add("exampleOutput");
    openapiFields.add("description");
    openapiFields.add("promptType");
    openapiFields.add("language");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PromptModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PromptModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PromptModel is not found in the empty JSON string", PromptModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PromptModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PromptModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("template") != null && !jsonObj.get("template").isJsonNull()) && !jsonObj.get("template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template").toString()));
      }
      if ((jsonObj.get("systemTemplate") != null && !jsonObj.get("systemTemplate").isJsonNull()) && !jsonObj.get("systemTemplate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `systemTemplate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("systemTemplate").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("provider") != null && !jsonObj.get("provider").isJsonNull()) && !jsonObj.get("provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider").toString()));
      }
      if ((jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) && !jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
      if ((jsonObj.get("exampleInput") != null && !jsonObj.get("exampleInput").isJsonNull()) && !jsonObj.get("exampleInput").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exampleInput` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exampleInput").toString()));
      }
      if ((jsonObj.get("exampleOutput") != null && !jsonObj.get("exampleOutput").isJsonNull()) && !jsonObj.get("exampleOutput").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exampleOutput` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exampleOutput").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("promptType") != null && !jsonObj.get("promptType").isJsonNull()) && !jsonObj.get("promptType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `promptType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("promptType").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PromptModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PromptModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PromptModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PromptModel.class));

       return (TypeAdapter<T>) new TypeAdapter<PromptModel>() {
           @Override
           public void write(JsonWriter out, PromptModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PromptModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PromptModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PromptModel
   * @throws IOException if the JSON string is invalid with respect to PromptModel
   */
  public static PromptModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PromptModel.class);
  }

  /**
   * Convert an instance of PromptModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

